{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","birth_year","height","className","alt","src","width","CardList","people","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","children","App","onSearchChange","event","setState","searchfield","target","value","state","Promise","all","url","a","fetch","response","json","morePeople","combinedArrayOfPeople","push","results","sortedArrayOfPeople","flat","sort","b","localeCompare","catch","error","console","log","this","filteredPeople","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sSAeeA,EAbF,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,OACjC,OACC,yBAAKC,UAAU,uCACd,yBAAKC,IAAI,uBAAuBC,IAAI,8FAA8FH,OAAO,MAAMI,MAAM,QACrJ,6BACC,4BAAKN,GACL,2BAAIC,GACJ,2BAAIC,MCUOK,EAhBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAClB,OACI,6BACGA,EAAOC,KAAI,SAACC,EAAMC,GACxB,OAAQ,kBAAC,EAAD,CACRC,IAAKD,EACLX,KAAMQ,EAAOG,GAAGX,KAChBC,WAAYO,EAAOG,GAAGV,WACtBC,OAAQM,EAAOG,GAAGT,cCKLW,EAdG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACnB,OACE,yBAAKX,UAAU,OAChB,2BACEA,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAWH,MCCAI,EARA,SAACC,GACf,OACC,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBpB,OAAQ,UACrEiB,EAAMI,WC0DMC,G,kBAxDd,aAAe,IAAD,8BACb,+CAmCFC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAnCzC,EAAKC,MAAQ,CACZvB,OAAQ,GACFoB,YAAa,IAJP,E,iFAQM,IAAD,OAWlBI,QAAQC,IAVK,CACZ,+BACA,sCACA,sCACA,sCACA,sCACA,sCACA,uCAGgBxB,IAAL,uCAAS,WAAMyB,GAAN,qBAAAC,EAAA,sEACGC,MAAMF,GADT,cACdG,EADc,gBAEKA,EAASC,OAFd,OAEdC,EAFc,QAGhBC,EAAwB,EAAKT,MAAMvB,QACjBiC,KAAKF,EAAWG,SAElCC,EAAsBH,EACxBI,OACAC,MAAK,SAACV,EAAGW,GAAJ,OAAUX,EAAEnC,KAAK+C,cAAcD,EAAE9C,SAExC,EAAK2B,SAAS,CAACnB,OAAQmC,IAVH,4CAAT,wDAYXK,OAAM,SAAAC,GAAK,OACXC,QAAQC,IAAI,mCAAoCF,Q,+BAQxC,IAAD,EACwBG,KAAKrB,MAA7BvB,EADA,EACAA,OAAQoB,EADR,EACQA,YACVyB,EAAiB7C,EAAO8C,QAAO,SAAA9C,GAAM,OAAIA,EAAOR,KAAKuD,cAAcC,SAAS5B,EAAY2B,kBAC9F,OAED,yBAAKpD,UAAU,MACX,4DACH,kBAAC,EAAD,CAAWW,aAAcsC,KAAK3B,iBAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUjB,OAAQ6C,U,GAlDFI,c,MCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD0H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3c3b2ab2.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, birth_year, height }) => {\n\treturn (\n\t\t<div className='tc bg-white-70 dib br3 pa3 ma2 grow'>\n\t\t\t<img alt='Star Wars Characters' src='https://image.businessinsider.com/5dceb1907eece53e71466e02?width=2500&format=jpeg&auto=webp' height=\"200\" width=\"200\" />\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{birth_year}</p>\n\t\t\t\t<p>{height}</p>\n\t\t\t</div>\n\t\t</div>\n\t\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({people}) => {\n\treturn (\n\t    <div>\n\t     \t{people.map((user, i)  => {\n\t\treturn (<Card \n\t\tkey={i} \n\t\tname={people[i].name}\n\t\tbirth_year={people[i].birth_year}\n\t\theight={people[i].height}\n\t\t/>\n);\n\t})}\n\t    </div>\n\t);\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n\treturn (\n\t  <div className='pa2'>\n\t\t<input\n\t\t  className='pa3 ba b--green bg-lightest-blue'\n\t\t  type='search'\n\t\t  placeholder='search people'\n\t\t  onChange= {searchChange}\n\t\t />\n\t  </div>\n\t);\n}\n\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{ overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\n\t\t{props.children}\n\t\t</div>\n\t\t);\n};\n\nexport default Scroll;","import React, { Component } from 'react';\nimport CardList from '../Components/CardList';\nimport SearchBox from '../Components/SearchBox';\nimport Scroll from '../Components/Scroll';\nimport '../Containers/App.css';\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\tpeople: [],\n\t        searchfield: ''\n\t\t}\n\t}\n\ncomponentDidMount() {\n\t\tconst urls = [\n\t\t\t'https://swapi.co/api/people/',\n\t\t\t'https://swapi.co/api/people/?page=2', \n\t\t\t'https://swapi.co/api/people/?page=3',\n\t\t\t'https://swapi.co/api/people/?page=4',\n\t\t\t'https://swapi.co/api/people/?page=5',\n\t\t\t'https://swapi.co/api/people/?page=6',\n\t\t\t'https://swapi.co/api/people/?page=7'\n\t\t]\n\t\t\n\t\tPromise.all(urls.map(async url => {\n\t\t\tconst response = await fetch(url);\n\t\t\tconst morePeople = await response.json();\n\t\t\tvar combinedArrayOfPeople = this.state.people;\n\t\t\tcombinedArrayOfPeople.push(morePeople.results);\n\t\t\t\n\t\t\tvar sortedArrayOfPeople = combinedArrayOfPeople\n\t\t\t\t.flat()\n\t\t\t\t.sort((a, b) => a.name.localeCompare(b.name));\n\t\t\t\n\t\t\tthis.setState({people: sortedArrayOfPeople})\n\t\t}))\n\t\t.catch(error => \n\t\t\tconsole.log('Error during fetching of people:', error)\n\t\t);\n\t}\n\nonSearchChange = (event) => {\n\tthis.setState({ searchfield: event.target.value })\n}\n\n\trender() {\n\t\tconst { people, searchfield } = this.state;\n\t\tconst filteredPeople = people.filter(people => people.name.toLowerCase().includes(searchfield.toLowerCase()));\n\t\treturn (\n\n\t<div className='tc'>\n\t    <h1>Star Wars Character Database</h1>\n\t\t<SearchBox searchChange={this.onSearchChange}/>\n\t\t<Scroll>\n\t\t<CardList people={filteredPeople} />\n\t\t</Scroll>\n\t\t</div>\n\t);\n}\n}\n\t\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}